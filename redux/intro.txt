Redux
    > State Management for any Javascript application
    > For REACT, ANGULAR, Vanilla Javascript, Vue

When to use Redux?
    > App with Complex UI
    >  Keep in sync with diff part of UI
    > Data change can happen because of Network calls, events etc.. and to be in sync in multiple components,
    > Data flow between different components, update immediately etc..,

Need to maintain or to know How data changed?
    > Need state management library

Some State management tools
    > Flux
        FaceBook - had state problem, came up with (flux)
    > Redux - inspired by flux (popular, because of simplicity and elegance)
    >  Mobx

Redux
    > Store all app state in the central repository
    > Simple object
    > Single DB for UI
    > No app will maintain its state, but get from a single place
    > if need update it will update in the global state
    > Helps in Sync data with applications
    > Also, helps in    
        how - data changed,
        why - data changed,
        when - data changed,
        and where it came from
    
Nutshell
    > Centralized appliaction state
    > Makes data flow transparent and predictable


Pros & cons
    Pros
        > Centralized state - all data in a single state - All data in sync
        > Time travel with earlier change (Jump to any state and restore the UI to debug)
        > Allow caching the maintain the state
        > State change is predictable and transparent
        > implement undo/Redo
        > Works with any JS
        > Ecosystem of add-ons

    Cons
        > Some complexity (Functional programing principle)
        > Verbos (need to write lot of boiler plate)

Choice of Redux is based on -
    > What problem we are trying to solve?
    > What all the possible solutions?
    > What constraints we have? 

 When NOT to use Redux?
    > Tight budget
    > Small or medium size application
    > Simple UI / data flow
    > Static data -(Just data or get API always and render it)

Debugging
    Redux Dev tool helps in view the state data and to do the time travel debugging

Production Log
    Log Rocket > Helps in logging the data in production and do the time travel and debug


Redux Content
    > It is based on Functional programming
        >> Higher Order Functions,
        >> Composition, 
        >> Currying,
        >> immutability
    > Fundementals of Redux
        >> All the building block of Redux
        >> Reducers, 
        >> Actions,
        >> Action creators.
    > Building Redux from Scratch
    > Debugging Redux application
        >> Various Tools and Debugging
    > Writing Clean code in Redux
        >> Clean, 
        >> Concice,
        >> proper redux code.
    > Design Redux Store (For Complex Applications)
        >> Patterns
        >> Techniques
    > Middleware
        >> Super simplified way of Middleware
    > Calling API
        >> Cool way of codinng.
        >> Loading indicator,
        >> Caching
    > Testing Redux applications  
        >> Good practice for good testing
    > Integrating Redux into React Applications
        > Old way of connecting components to Redux
        > New way of Connecting Components to Redux


Functional programming
    Redux build on top op functional programming
    > Compose a problem into a bunch of small functions, that can be reused
    > input -> [Function] -> output
    > provide same o/p for same i/p
    > multiple functions combined to build more complex systems
        >> [Function] [Function] [Function]...
    > Benifites
        >> More Concise
        >> Easy to understand and Debugging
        >> Easy to test
        >> More Scalable
    > Runc many functions in parallel and take the advantage of multiple cores of CPU

    JavaScript (Multi Dimention programing language)
    
Redux Architecture
    > Maintain the state of the Javascript application
    > Mintains in a single Object called Store
    > Store is the source of truth
    > Store is accessible by all parts of UI (All component at any level at any nesting can access)

Store  
    > Object
    > Contain any thing in it - No restriction
    > Not possible to directly modify the Store
    > To update it has to be done by a function
        >> Takes Store as input
        >> CLone it to new object
        >> Do necessery modufication in new object
        >> Return it
        NOTE: Function does this operation is called REDUCER

    > Action Defines which Store to update
        >> 2nd Param to Reducer,
        >> Type: Object
        >> must have "type" as property (this tells which state to update)

Building Blocks

ACTION* >>>> STORE >>>> REDUCER*
(Events)                (Event Handler)
                        (Pure functions)

                        |                (dispatch)                     |       |               (Forwards)                  |        |
            User Action |                                               | STORE |                                           |        | (Reducer Modifies &
    (Creat Action object|--------------------->------------------------>|       |-------------------->--------------------->| REDUCER|      Send the updated state
         & displatch)   |                                               |       | (Store Directly forwards to Reducer)      |        |      to store)
    (Adding an item     |                                               |       | - - - - -< - - - - - < - - - - -<- - - - -|        |
        to the CART)

    > (No direct communication between Dispatcher and Reducer)
    > (Store > Notify all the UI component about the state update)

    Multiple Displath > Single Pipe to Store
    Advantage
        >> Log every thing in sequence
        >> Helps in Forward and Backawrd state play (Time travel)